//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  GAMOS software  is  copyright of the Copyright  Holders  of *
// * the GAMOS Collaboration.  It is provided  under  the  terms  and *
// * conditions of the GAMOS Software License,  included in the  file *
// * LICENSE and available at  http://fismed.ciemat.es/GAMOS/license .*
// * These include a list of copyright holders.                       *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GAMOS collaboration.                       *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the GAMOS Software license.           *
// ********************************************************************
//
#include "GamosCore/GamosUtils/include/GmGenUtils.hh"

//----------------------------------------------------------------------------
G4bool GmParameterListVNumeric::AddParam( const G4String& name, const std::vector<G4double>& val )
{
  GmParameterListVNumeric::iterator ite = GmParameterListVNumeric::find(name);
  if( ite != GmParameterListVNumeric::end() ) {
    (*ite).second.Set( val );
    return FALSE;
  } else {
    std::vector<G4double> resolvedVal;
    for( unsigned int ii = 0; ii < val.size(); ii++ ){
      resolvedVal.push_back( GmGenUtils::GetValue( val ) );	 
    }
    (*this)[name] = GmParameter<std::vector<G4double> >(resolvedVal);
//  G4cout << "ADD PARAM numb " << size() << G4endl;
    return TRUE;
  }
}


//----------------------------------------------------------------------------
std::vector<G4double> GmParameterListVNumeric::GmGenUtils::GetValue( const G4String& parname, G4bool& parExists )
{
//G4cout << "enter  GmParameterListVNumeric::GmGenUtils::GetValue " << parname << " exists " << parExists << G4endl;

  GmParameterListVNumeric::const_iterator ite = GmParameterListVNumeric::find(parname);

  if( ite == GmParameterListVNumeric::end() ) {
    parExists = FALSE;
    std::vector<G4double> typ;
//G4cout << "  GmParameterListVNumeric::GmGenUtils::GetValue " << parname << " exists " << parExists << G4endl;
    return typ;
  } else {
    parExists = TRUE;
// G4cout << "  GmParameterListVNumeric::GmGenUtils::GetValue " << parname << " exists " << parExists << " = " << ((*ite).second)() << G4endl;
    return ((*ite).second)();
  }
}

    
//----------------------------------------------------------------------------
void GmParameterListVNumeric::DumpList( const G4String& type, std::ostream& out )
{

  out << "PARAMETER DECLARED IN COMMAND FILE of TYPE : " << type << G4endl;
  GmParameterListVNumeric::const_iterator itet;  
  for( itet = this->begin(); itet != this->end(); itet++) {
    G4cout << "PARAM " << (*itet).first << " = " << ((*itet).second)() << G4endl;
  }
	
}	
   
 
//----------------------------------------------------------------------------
void GmParameterListVNumeric::DumpListNoValue( const G4String& type, std::ostream& out )
{
  out << "PARAMETER DECLARED IN COMMAND FILE  of TYPE : " << type << G4endl;
  GmParameterListVNumeric::const_iterator itet;  
  for( itet = this->begin(); itet != this->end(); itet++) {
    G4cout << "PARAM " << (*itet).first << " = " << G4endl;
  }
	
}
