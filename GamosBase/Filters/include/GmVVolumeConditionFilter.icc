//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  GAMOS software  is  copyright of the Copyright  Holders  of *
// * the GAMOS Collaboration.  It is provided  under  the  terms  and *
// * conditions of the GAMOS Software License,  included in the  file *
// * LICENSE and available at  http://fismed.ciemat.es/GAMOS/license .*
// * These include a list of copyright holders.                       *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GAMOS collaboration.                       *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the GAMOS Software license.           *
// ********************************************************************
//
#include "GmVVolumeConditionFilter.hh"
#include "GamosCore/GamosUtils/include/GmGenUtils.hh"
#include "GamosCore/GamosUtils/include/GmG4Utils.hh"
#include "GamosCore/GamosGeometry/include/GmGeometryUtils.hh"
#include "G4Track.hh"
#include "G4LogicalVolume.hh"
#include "G4LogicalVolumeStore.hh"

//-----------------------------------------------------------------------
template <class TCond,class TVol>
GmVVolumeConditionFilter<TCond,TVol>::GmVVolumeConditionFilter(G4String name)
  :GmVFilter(name)
{
  theCondition = new TCond;
  theFilterVolume = new TVol;
}

//-----------------------------------------------------------------------
template <class TCond,class TVol>
GmVVolumeConditionFilter<TCond,TVol>::~GmVVolumeConditionFilter()
{ 
}

//-----------------------------------------------------------------------
template <class TCond,class TVol>
G4bool GmVVolumeConditionFilter<TCond,TVol>::AcceptStep(const G4Step* aStep)
{
  const G4VTouchable* touch = theCondition->GetTouchableFromStep( aStep );
  if( touch && theFilterVolume->AcceptTouchable( touch ) ){
    return TRUE;
  }
  return FALSE;
}

//-----------------------------------------------------------------------
template <class TCond,class TVol>
G4bool GmVVolumeConditionFilter<TCond,TVol>::AcceptTrack(const G4Track* aTrack)
{
  const G4VTouchable* touch = theCondition->GetTouchableFromTrack( aTrack );
  if( touch && theFilterVolume->AcceptTouchable( touch ) ){
    return TRUE;
  }
  return FALSE;
}

//-----------------------------------------------------------------------
template <class TCond,class TVol>
  void GmVVolumeConditionFilter<TCond,TVol>::show()
{
  theFilterVolume->show();
}

//-----------------------------------------------------------------------
template <class TCond,class TVol>
  void GmVVolumeConditionFilter<TCond,TVol>::SetParameters( std::vector<G4String>& params)
{
  theFilterVolume->SetParameters(params);
}
