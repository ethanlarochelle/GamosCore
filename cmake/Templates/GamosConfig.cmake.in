# - Gamos CMake Configuration File for External Projects
# This file is configured by Gamos for use by an external project
# As this file is configured by Gamos's CMake system it SHOULD NOT BE EDITED
# It defines the following variables
#  Gamos_INCLUDE_DIRS - include directories for Gamos
#  Gamos_DEFINITIONS  - compile definitions needed to use Gamos
#  Gamos_LIBRARIES    - libraries to link against
#  Gamos_CXX_FLAGS    - Recommended CXX flags for the compiler used to
#                        build the Gamos libraries.
#  Gamos_CXX_FLAGS_<CONFIG> - Recommended CXX flags for build mode CONFIG.
#  Gamos_USE_FILE     - path to a CMake module which may be included to help
#                        setup CMake variables 
#
# You may supply a version number through find_package which will be checked
# against the version of this build. Standard CMake logic is used so that
# the EXACT flag may be passed, and otherwise this build will report itself
# as compatible with the requested version if:
#
#  VERSION_OF_THIS_BUILD >= VERSION_REQUESTED
#
# By default only the core (or kernel) of Gamos is activated by this module.
# You can specify additional components of Gamos through the COMPONENTS
# argument to find_package. By default, all core libraries of Gamos are
# appended to the Gamos_LIBRARIES variable. Specifiying additional components
# will enable a check on the existence of these components, with the following
# per component variables being set:
#
#  Gamos_${COMPONENT}_FOUND    TRUE is the Gamos library "component" was
#                               found
#
#  Gamos_${COMPONENT}_LIBRARY  Contains the library for the specified
#                               "component" IF the component is a library.
#
# In Gamos, components can be optional subcomponents of an always available
# library. In that case there will be no Gamos_{COMPONENT}_LIBRARY variable.
# These non-library components are generally activated by compile definitions, 
# and in these cases the appropriate definition will be added to the
# Gamos_DEFINITIONS component
#
# If you specify components and use the REQUIRED option to find_package, then
# the module will issue a FATAL_ERROR if this build of Geant does not have 
# the requested component(s).
#
# The list of components available generally corresponds to the optional extras
# that Gamos can be built with and are:
#
#  gdml              (GDML support)
#  g3tog4            (Geant3 geometry call list reader library)
#
#  ui_tcsh           (TCsh Style Application Command Line Interface)
#  ui_win32          (WIN32 Style Application Command Line Interface)
#
#  motif             (Motif-X11/OpenGL Graphical User Interface)
#  qt                (Qt4/OpenGL Graphical User Interface)
#
#  vis_network_dawn  (Client/Server network interface to DAWN visualization)
#  vis_network_vrml  (Client/Server network interface to VRML visualization)
#  vis_opengl_x11    (OpenGL visualization with X11 interface)
#  vis_opengl_win32  (OpenGL visualization with X11 interface)
#  vis_raytracer_x11 (RayTracer visualization with X11 interface)
#  vis_openinventor  (OpenInventor visualization)
#
# In addition, two 'shorthand' components are defined to help activate all
# available User Interface and Visualization drivers:
# 
#  ui_all            (All available UI drivers)
#  vis_all           (All available Vis drivers)
#
# These never result in a FATAL_ERROR, even if the REQUIRED find_package 
# argument is set. This is because these options do not depend on specific
# components being available.
#
# ===========================================================================
# Variables used by this module which can change the default behaviour of
# this module. They need to be set prior to the call to find_package
#
#  Gamos_CONFIG_DEBUG    If set, enable extra messaging output which can be
#                         helpful in debugging and identifying problems with
#                         the configuration.
#
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# DEBUG : print out the variables passed via find_package arguments
#
if(Gamos_CONFIG_DEBUG)
  message(STATUS "GmCFG_DEBUG : Gamos_VERSION         = ${Gamos_VERSION}")
  message(STATUS "GmCFG_DEBUG : Gamos_FIND_VERSION    = ${Gamos_FIND_VERSION}")
  message(STATUS "GmCFG_DEBUG : Gamos_FIND_REQUIRED   = ${Gamos_FIND_REQUIRED}")
  message(STATUS "GmCFG_DEBUG : Gamos_FIND_COMPONENTS = ${Gamos_FIND_COMPONENTS}")

  foreach(_cpt ${Gamos_FIND_COMPONENTS})
    message(STATUS "GmCFG_DEBUG : Gamos_FIND_REQUIRED_${_cpt} = ${Gamos_FIND_REQUIRED_${_cpt}}")
  endforeach()

  message(STATUS "GmCFG_DEBUG : Gamos_LIBDEPS_LOADED = ${Gamos_LIBDEPS_LOADED}")
endif()

#-----------------------------------------------------------------------
# Locate ourselves, since all other config files should have been 
# installed alongside us...
#
get_filename_component(_thisdir "${CMAKE_CURRENT_LIST_FILE}" PATH)

#-----------------------------------------------------------------------
# Provide *recommended* compiler flags used by this build of Gamos
# Don't mess with the actual CMAKE_CXX_FLAGS!!!
# It's up to the user what to do with these
@GAMOS_COMPILER_FLAG_HINTS@

#-----------------------------------------------------------------------
# Set the base compile definitions required to use Gamos if the variable
# does not exist (we do this to ensure multiple calls to find_package
# don't overwrite previous invocations)
# Components may append to this
# We set VIS/UI_USE directly here, because for now they are, unfortunately,
# always needed for the Examples. 
# However, they ARE NOT required to use Gamos itself.
#
if(NOT Gamos_DEFINITIONS)
  set(Gamos_DEFINITIONS @GAMOS_CORE_DEFINITIONS@)
endif()

# We set VIS/UI_USE directly here, because for now they are, unfortunately,
# always needed for the Examples. 
# However, they ARE NOT required to use Gamos itself.
#
if(NOT G4UI_NONE)
  list(APPEND Gamos_DEFINITIONS -DG4UI_USE)
endif()

if(NOT GmVIS_NONE)
  list(APPEND Gamos_DEFINITIONS -DGmVIS_USE)
endif()

#-----------------------------------------------------------------------
# Configure the path to the Gamos headers, using a relative path if 
# possible. This is only known at CMake time, so we expand a CMake 
# supplied variable.
#
@GAMOS_INCLUDE_DIR_SETUP@

@GAMOS_MODULE_PATH_SETUP@

#-----------------------------------------------------------------------
# Configure the path(s) to third party headers.
# This is not a perfect solution to recording dependencies on external
# libraries, but it does ensure that users of THIS Gamos will pick up
# those it was built against.
# Library dependencies are generally handled through the 
# GamosLibraryDepends file listed below (apart from one exception!)
#
set(Gamos_THIRD_PARTY_INCLUDE_DIRS @GAMOS_THIRD_PARTY_INCLUDES@)

#-----------------------------------------------------------------------
# Construct overall include path for using Gamos
#
set(Gamos_INCLUDE_DIRS
    ${Gamos_INCLUDE_DIR}
    ${Gamos_THIRD_PARTY_INCLUDE_DIRS})

#-----------------------------------------------------------------------
# If we have used imported targets for any third party packages, reimport
# them here, BEFORE we try and import the Gamos targets which are
# linked against them.
# Generally, we try and use a standard find_package, but try and force it
# to find the actual package we were built against.
# THIS IS NOT PERFECT, AS IT CANNOT GUARANTEE A BINARY COMPATIBLE
# PACKAGE IS FOUND.
@GAMOS_THIRD_PARTY_IMPORT_SETUP@

#-----------------------------------------------------------------------
# Include the file listing all the imported targets.
# (Not needed if used in the same Gamos project, or if we have run before) 
# This is always installed in the same location as us...
#
if(NOT CMAKE_PROJECT_NAME STREQUAL Gamos)
  if(NOT Gamos_LIBDEPS_LOADED)
    include("${_thisdir}/GamosLibraryDepends.cmake")
    set(Gamos_LIBDEPS_LOADED 1)
  endif()
endif()

#-----------------------------------------------------------------------
# Setup components.
# THIS SECTION IS VERY ROUGH AND VERY MUCH CUT AND PASTE.
# TODO: INVESTIGATE TIDY UP WITH LESS PROCESSING.
#-----------------------------------------------------------------------
# Many components are simply present as parts of libraries or always built
# but require additional compile definitions.
#
# - GDML
set(Gamos_gdml_FOUND @GAMOS_USE_GDML@)
if(Gamos_gdml_FOUND)
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS gdml)
endif()

# - G3toGm
set(Gamos_g3tog4_FOUND @GAMOS_USE_G3TOGm@)
if(Gamos_g3tog4_FOUND)
  if(Gamos_FIND_REQUIRED_g3tog4)
    set(_gamos_use_g3tog4_library ON)
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS g3tog4)
endif()

# - UI : TCSH
set(Gamos_ui_tcsh_FOUND @UNIX@)
if(Gamos_ui_tcsh_FOUND)
  if(Gamos_FIND_REQUIRED_ui_tcsh OR Gamos_FIND_REQUIRED_ui_all)
    list(APPEND Gamos_DEFINITIONS -DG4UI_USE_TCSH)
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS ui_tcsh)
endif()

# - UI : win32
set(Gamos_ui_win32_FOUND @WIN32@)
if(Gamos_ui_win32_FOUND)
  if(Gamos_FIND_REQUIRED_ui_win32 OR Gamos_FIND_REQUIRED_ui_all)
    list(APPEND 
      Gamos_DEFINITIONS 
      -DGmINTY_USE_WIN32
      -DG4UI_USE_WIN32
      )
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS ui_win32)
endif()

# - Visualization : Network DAWN
set(Gamos_vis_dawn_network_FOUND @GAMOS_USE_NETWORK_DAWN@)
if(Gamos_vis_dawn_network_FOUND)
  if(Gamos_FIND_REQUIRED_vis_dawn_network OR Gamos_FIND_REQUIRED_vis_all)
    list(APPEND Gamos_DEFINITIONS -DGmVIS_USE_DAWN)
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_dawn_network)
endif()

# - Visualization : Network VRML
set(Gamos_vis_vrml_network_FOUND @GAMOS_USE_NETWORK_VRML@)
if(Gamos_vis_vrml_network_FOUND)
  if(Gamos_FIND_REQUIRED_vis_vrml_network OR Gamos_FIND_REQUIRED_vis_all)
    list(APPEND Gamos_DEFINITIONS -DGmVIS_USE_VRML)
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_vrml_network)
endif()

#----------------------------------------------------------------------------
# Components which requires slightly more complex setup
#
# - Visualization : RayTracerX
set(Gamos_vis_raytracer_x11_FOUND @GAMOS_USE_RAYTRACER_X11@)
if(Gamos_vis_raytracer_x11_FOUND)
  if(Gamos_FIND_REQUIRED_vis_raytracer_x11 OR Gamos_FIND_REQUIRED_vis_all)
    list(APPEND
      Gamos_DEFINITIONS
      -DGmINTY_USE_XT
      -DGmVIS_USE_RAYTRACERX
      )
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_raytracer_x11)
endif()

# - Qt (UI and Vis!)
set(Gamos_qt_FOUND @GAMOS_USE_QT@)
if(Gamos_qt_FOUND)
  if(Gamos_FIND_REQUIRED_qt OR Gamos_FIND_REQUIRED_ui_all OR
      Gamos_FIND_REQUIRED_vis_all)
    list(APPEND 
      Gamos_DEFINITIONS 
      -DGmINTY_USE_QT
      -DG4UI_USE_QT
      -DGmVIS_USE_OPENGLQT
      )
    set(_gamos_use_opengl_library ON)
  endif()
  list(REMOVE_ITEM Gamos_FIND_COMPONENTS qt)
endif()

# - Motif (UI and Vis!)
set(Gamos_motif_FOUND @GAMOS_USE_XM@)
if(Gamos_motif_FOUND)
  if(Gamos_FIND_REQUIRED_motif OR Gamos_FIND_REQUIRED_ui_all OR
      Gamos_FIND_REQUIRED_vis_all)
    list(APPEND
      Gamos_DEFINITIONS
      -DGmINTY_USE_XT
      -DG4UI_USE_XM
      -DGmVIS_USE_OPENGLXM
      )
    set(_gamos_use_opengl_library ON)
  endif()

  list(REMOVE_ITEM Gamos_FIND_COMPONENTS motif)
endif()

# - OpenGL X11
set(Gamos_vis_opengl_x11_FOUND @GAMOS_USE_OPENGL_X11@)
if(Gamos_vis_opengl_x11_FOUND)
  if(Gamos_FIND_REQUIRED_vis_opengl_x11 OR Gamos_FIND_REQUIRED_vis_all)
    list(APPEND
      Gamos_DEFINITIONS
      -DGmINTY_USE_XT
      -DGmVIS_USE_OPENGLX
      )
    set(_gamos_use_opengl_library ON)    
  endif()

  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_opengl_x11)
endif()

# - OpenGL Win32
set(Gamos_vis_opengl_win32_FOUND @GAMOS_USE_OPENGL_WIN32@)
if(Gamos_vis_opengl_win32_FOUND)
  if(Gamos_FIND_REQUIRED_vis_opengl_win32 OR Gamos_FIND_REQUIRED_vis_all)
    list(APPEND
      Gamos_DEFINITIONS
      -DGmINTY_USE_WIN32
      -DGmVIS_USE_OPENGLWIN32
      )
    set(_gamos_use_opengl_library ON)    
  endif()

  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_opengl_win32)
endif()

# - OpenInventor
set(Gamos_vis_openinventor_FOUND @GAMOS_USE_INVENTOR@)
if(Gamos_vis_openinventor_FOUND)
  if(Gamos_FIND_REQUIRED_vis_openinventor OR Gamos_FIND_REQUIRED_vis_all)
    if(UNIX AND NOT WIN32)
      list(APPEND Gamos_DEFINITIONS
        -DGmINTY_USE_XT
        -DGmVIS_USE_OI
        -DGmVIS_USE_OIX
        )
    elseif(WIN32)
      list(APPEND Gamos_DEFINITIONS
        -GmINTY_USE_WIN32
        -DGmVIS_USE_OI
        -DGmVIS_USE_OIWIN32
        )
    endif()

    set(_gamos_use_inventor_library ON)
  endif()

  list(REMOVE_ITEM Gamos_FIND_COMPONENTS vis_openinventor)
endif()


#-----------------------------------------------------------------------
# Now perform final configuration of libraries...
# We provide FOUND variables for shared and static but for now we don't 
# allow users to choose - we prefer shared if available, and fallback to 
# static otherwise
#
set(Gamos_shared_FOUND @BUILD_SHARED_LIBS@)
set(Gamos_static_FOUND @BUILD_STATIC_LIBS@)

if(Gamos_shared_FOUND)
  set(_gamos_lib_use_suffix "")
else()
  set(_gamos_lib_use_suffix "-static")
endif()

# The list of libraries probably should be autogenerated, but we hard code
# for now. We don't have to divide the list of shared libraries, but we
# do so for consistency with the way we'll need to do it for static.
# - Always on Vis Components
set(_gamos_internal_libraries
  GamosAnalysis${_gamos_lib_use_suffix}
  GamosApplication${_gamos_lib_use_suffix}
  GamosBase_Base${_gamos_lib_use_suffix}
  GamosBase_Classifiers${_gamos_lib_use_suffix}
  GamosBase_Filters${_gamos_lib_use_suffix}
  GamosData_Data${_gamos_lib_use_suffix}
  GamosData_Distributions${_gamos_lib_use_suffix}
  GamosData_Management${_gamos_lib_use_suffix}
  GamosData_Users${_gamos_lib_use_suffix}
  GamosGenerator${_gamos_lib_use_suffix}
  GamosGeometry${_gamos_lib_use_suffix}
  GamosMovement${_gamos_lib_use_suffix}
  GamosPhysics_Cuts${_gamos_lib_use_suffix}
  GamosPhysics_OtherPhysicsLists${_gamos_lib_use_suffix}
  GamosPhysics_PhysicsList${_gamos_lib_use_suffix}
  GamosPhysics_VarianceReduction${_gamos_lib_use_suffix}
  GamosReadDICOM${_gamos_lib_use_suffix}
  GamosSD${_gamos_lib_use_suffix}
  GamosScoring_Management${_gamos_lib_use_suffix}
  GamosScoring_PointDetector${_gamos_lib_use_suffix}
  GamosScoring_Printers${_gamos_lib_use_suffix}
  GamosScoring_Scorers${_gamos_lib_use_suffix}
  GamosUserActionMgr${_gamos_lib_use_suffix}
  GamosUtils${_gamos_lib_use_suffix}
  GamosUtilsUA${_gamos_lib_use_suffix}
  MagFieldManager${_gamos_lib_use_suffix}
  Base${_gamos_lib_use_suffix}
  ComptonCamera${_gamos_lib_use_suffix}
  PET${_gamos_lib_use_suffix}
  RadioTherapy${_gamos_lib_use_suffix}
  SPECT${_gamos_lib_use_suffix}
  SealBase${_gamos_lib_use_suffix}
  Shielding${_gamos_lib_use_suffix}
  )

# - Any externals built by Gamos
foreach(_extlib @GAMOS_EXTERNALS_TARGETS@)
  list(APPEND 
    _gamos_internal_libraries
    ${_extlib}${_gamos_lib_use_suffix}
    )
endforeach()

# - Now set them to Gamos_LIBRARIES
set(Gamos_LIBRARIES ${_gamos_internal_libraries})


#-----------------------------------------------------------------------
# Remove any duplicates from the Gamos_{DEFINITIONS,INCLUDE_DIRS,LIBRARIES}
# variables so that multiple passes append things correctly 
#
list(REMOVE_DUPLICATES Gamos_DEFINITIONS)
list(REMOVE_DUPLICATES Gamos_INCLUDE_DIRS)
list(REMOVE_DUPLICATES Gamos_LIBRARIES)

#-----------------------------------------------------------------------
# Point the user to the UseGamos.cmake file which they may wish to include
# to help them with setting up Gamos
#
set(Gamos_USE_FILE ${_thisdir}/UseGamos.cmake)

#-----------------------------------------------------------------------
# Finally, handle any remaining components.
# We should have dealt with all available components above, except for 
# ui_all and vis_all, and removed them from the list of FIND_COMPONENTS 
# so any left  we either didn't find or don't know about. Emit a warning 
# if REQUIRED isn't set, or FATAL_ERROR otherwise
#
list(REMOVE_DUPLICATES Gamos_FIND_COMPONENTS)
list(REMOVE_ITEM Gamos_FIND_COMPONENTS ui_all vis_all)

foreach(_remaining ${Gamos_FIND_COMPONENTS})
  if(Gamos_FIND_REQUIRED)
    message(FATAL_ERROR "Gamos component ${_remaining} not found")
  elseif(NOT Gamos_FIND_QUIETLY)
    message(WARNING " Gamos component ${_remaining} not found")
  endif()
  unset(Gamos_FIND_REQUIRED_${_remaining})
endforeach()

# And we should be done...

